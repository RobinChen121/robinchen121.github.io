<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://robinchen121.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://robinchen121.github.io/" rel="alternate" type="text/html"/><updated>2024-07-09T13:57:33+00:00</updated><id>https://robinchen121.github.io/feed.xml</id><title type="html">Dr. Chen</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Lipschitz continuous and absolute continuous</title><link href="https://robinchen121.github.io/blog/2024/Lipschitz-continuous-absolute-continuous/" rel="alternate" type="text/html" title="Lipschitz continuous and absolute continuous"/><published>2024-07-01T00:00:00+00:00</published><updated>2024-07-01T00:00:00+00:00</updated><id>https://robinchen121.github.io/blog/2024/Lipschitz-continuous-absolute-continuous</id><content type="html" xml:base="https://robinchen121.github.io/blog/2024/Lipschitz-continuous-absolute-continuous/"><![CDATA[<h2 id="1-lipschitz-continuity">1. Lipschitz Continuity</h2> <p>The term “Lipschitz continuity” is frequently encountered. Lipschitz continuity is stronger than ordinary continuity; it not only requires the function to be continuous but also demands that the function’s gradient is less than a positive real number.</p> <p>The definition for single-variable real functions can be:</p> <p>For any two points $x_1$ and $x_2$ in the domain, there exists a $K &gt; 0$ such that</p> \[|f(x_1)-f(x_2)|\leq K|(x_1-x_2)|\] <p>For multivariable functions, it requires that the gradient with respect to any variable is less than or equal to $K$.</p> <p><br/></p> <h2 id="2-absolute-continuity">2. Absolute Continuity</h2> <p>Besides Lipschitz continuity, there is also absolute continuity, which not only requires <a href="https://robinchen121.github.io/blog/2019/uniform-continuous/">uniform continuity</a> but also that the function is Lebesgue integrable. The inclusion relationship among these different types of continuity on a set is:</p> \[\text{Lipschitz continuous}\subset\text{absolute continuous}\subset\text{uniform continuous}\subset\text{ordinary continuous}\] <p>The definition of absolute continuity is:</p> <p>For any real number $\epsilon &gt; 0$ and any sequence of disjoint subintervals $(x_k, y_k)$ in the domain, there exists a real number $\delta &gt; 0$ such that when $\sum_k |x_k - y_k| &lt; \delta$, we have $\sum_k |f(x_k) - f(y_k)| &lt; \epsilon$. An example of a function that is uniformly continuous but not absolutely continuous is $x / \sin(1/x)$. Its graph is:</p> <p align="center"> <img src="https://raw.githubusercontent.com/RobinChen121/robinchen121.github.io/master/assets/img/none-absolute-continuous.png" style="width: 80%"/> </p> <p>For this function, one can find disjoint subintervals in the domain whose total length is less than a constant, but the total absolute deviation in all these subintervals can reach infinity (let $x_n = \frac{1}{2n\pi + \pi/2}$, $y_n = \frac{1}{2n\pi}$, $n \geq 1$).</p> <p>This function is also not Lebesgue integrable because:</p> \[\int_{-\infty}^{\infty}\left|\frac{x}{\sin(1/x)}\right|=\infty\] <p>(The integral of the absolute value of the function being not infinite is a condition for the existence of the Lebesgue integral.)</p>]]></content><author><name></name></author><category term="optimization"/><category term="Lipschitz continuous"/><category term="absolute continuous"/><category term="optimization"/><summary type="html"><![CDATA[1. Lipschitz Continuity]]></summary></entry><entry><title type="html">Branch and bound, branch and cut, branch and price</title><link href="https://robinchen121.github.io/blog/2024/branch-bound-cut-price/" rel="alternate" type="text/html" title="Branch and bound, branch and cut, branch and price"/><published>2024-04-11T00:00:00+00:00</published><updated>2024-04-11T00:00:00+00:00</updated><id>https://robinchen121.github.io/blog/2024/branch-bound-cut-price</id><content type="html" xml:base="https://robinchen121.github.io/blog/2024/branch-bound-cut-price/"><![CDATA[<p>In combination optimization problems and mixed integer programming models, we frequently encounter these three terms: branch-and-bound, branch-and-cut, and branch-and-price. These terms can sometimes be confusing. This blog post aims to summarize them:</p> <p><br/></p> <h2 id="1-branch-and-bound">1. Branch-and-Bound</h2> <p>Branch-and-bound is the most common method and is covered in the integer programming section of operations research courses in China. Its basic concept is relatively easy to understand and involves three main steps: branching, bounding, and pruning.</p> <p>For a mixed integer programming problem with the objective of maximization:</p> <ul> <li>Step 1: Relax the integer constraints, i.e., solve the linear programming problem of the original problem to obtain a solution $\bf x$ with an objective function value that serves as an upper bound for the original problem. Initialize the lower bound of the original problem to negative infinity $-\infty$. (If the linear programming problem has no solution, then the original problem has no solution either)</li> <li>Step 2: Termination condition of the algorithm: If there is no direction to branch, then the current lower bound is the optimal solution; otherwise:</li> <li>Step 3: <strong>Branch</strong>: In the solution $\bf x$, select a non-integer decision variable $x_i$ and construct two constraints: one greater than or equal to its ceiling value and one less than its floor value, thus creating two sub-linear programming models.</li> <li>Step 4: <strong>Bound</strong>: Solve the sub-linear programming models. If an integer solution is obtained, it is a feasible solution for the original problem, i.e., a lower bound for the original problem. If it is greater than the current lower bound, update the lower bound; if it is not an integer solution, <ul> <li>Step 4.1—<strong>Prune</strong>: If the sub-linear programming model is infeasible or the obtained solution is smaller than the known lower bound, prune the branch and do not branch further on it.</li> <li>Step 4.2—<strong>Continue branching</strong>: If the solution to the sub-linear programming problem is greater than the known lower bound, return to step 2 and continue the loop.</li> </ul> </li> </ul> <p>For some simple problems, the steps of branch-and-bound are very intuitive, for example:</p> <p><img src="/assets/img/branch-and-bound.jpg" alt=""/></p> <p><br/></p> <h2 id="2-branch-and-cut">2. Branch-and-Cut</h2> <p>The idea of branch-and-cut is to add cutting plane constraints before continuing to branch in step 4.2 of the branch-and-bound process, so that the sub-linear programming problem obtains a smaller solution, i.e., a tighter upper bound for the original problem.</p> <p><br/></p> <h2 id="3-branch-and-price">3. Branch-and-Price</h2> <p>In column generation algorithms, when combined with branch-and-bound, the method is called branch-and-price.</p>]]></content><author><name></name></author><category term="optimization"/><category term="branch and bound"/><category term="branch and bound"/><category term="branch and price"/><summary type="html"><![CDATA[In combination optimization problems and mixed integer programming models, we frequently encounter these three terms: branch-and-bound, branch-and-cut, and branch-and-price. These terms can sometimes be confusing. This blog post aims to summarize them:]]></summary></entry><entry><title type="html">Draw animated hear by Python</title><link href="https://robinchen121.github.io/blog/2023/draw-heart-python/" rel="alternate" type="text/html" title="Draw animated hear by Python"/><published>2023-11-09T04:30:00+00:00</published><updated>2023-11-09T04:30:00+00:00</updated><id>https://robinchen121.github.io/blog/2023/draw-heart-python</id><content type="html" xml:base="https://robinchen121.github.io/blog/2023/draw-heart-python/"><![CDATA[<p>Stumbled upon a dynamic heart-shaped graph implemented by someone using MATLAB on a Chinese TikTok video, I got inspired to recreate it using Python. So I explored two different implementation approaches, and the result is as follows:</p> <p align="center"> <img src="https://raw.githubusercontent.com/RobinChen121/robinchen121.github.io/master/assets/img/heart.gif"/> </p> <h2 id="method-one">Method One：</h2> <ul> <li>Apply looping and combine the parameter pause, clf in pyplot to achieve dynamic image refreshing</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>


<span class="c1"># type %matplotlib qt to shown figure in a separate window
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">-</span><span class="mf">1.8</span><span class="p">,</span> <span class="mf">1.8</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">while</span> <span class="n">alpha</span> <span class="o">&lt;=</span> <span class="mi">21</span><span class="p">:</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">xlim</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">ylim</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.9</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mf">3.3</span> <span class="o">-</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

    <span class="n">plt</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="o">-</span><span class="mf">1.6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$f(x)=x^{2/3}+0.9(3.3-x^2)^{1/2}\sin(\alpha\pi x)$</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">alpha_s</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">tx</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">,</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$\alpha=$</span><span class="sh">'</span> <span class="o">+</span> <span class="n">alpha_s</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">pause</span><span class="p">(</span><span class="mf">0.02</span><span class="p">)</span> <span class="c1"># pause 0.02 s
</span>    <span class="k">if</span> <span class="n">alpha</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">:</span>
        <span class="n">alpha</span> <span class="o">+=</span> <span class="mf">0.1</span>
        <span class="n">plt</span><span class="p">.</span><span class="nf">clf</span><span class="p">()</span> <span class="c1"># clear the current picture
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div> <h2 id="method-two">Method Two:</h2> <ul> <li>make use of the animation function in matplotlib library, achieving animation by updating the coordinates of pictures</li> <li>animation can generate <code class="language-plaintext highlighter-rouge">gif</code> format animated picture</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">matplotlib.animation</span> <span class="kn">import</span> <span class="n">FuncAnimation</span>


<span class="k">def</span> <span class="nf">animate</span><span class="p">(</span><span class="n">alpha</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">-</span><span class="mf">1.8</span><span class="p">,</span><span class="mf">1.8</span><span class="p">,</span><span class="mi">1000</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.9</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mf">3.3</span> <span class="o">-</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">alpha</span><span class="o">*</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span><span class="o">*</span><span class="n">x</span><span class="p">)</span>
    <span class="n">PLOT</span><span class="p">.</span><span class="nf">set_data</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">time_text</span><span class="p">.</span><span class="nf">set_text</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">$\alpha$ = </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="nf">round</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">PLOT</span><span class="p">,</span> <span class="n">time_text</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">,</span> <span class="n">xlim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">2.5</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">),</span> <span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="c1"># or plt.subplot
</span><span class="n">PLOT</span><span class="p">,</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">([],</span> <span class="p">[])</span> <span class="c1"># return all the lines
</span><span class="n">plt</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="o">-</span><span class="mf">1.2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$f(x)=x^{2/3}+0.9(3.3-x^2)^{1/2}\sin(\alpha\pi x)$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">time_text</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="o">-</span><span class="mf">0.45</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">,</span><span class="sh">''</span><span class="p">)</span> <span class="c1"># transform = ax.transAxes
</span>
<span class="n">ani</span> <span class="o">=</span> <span class="nc">FuncAnimation</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="n">animate</span><span class="p">,</span> <span class="n">frames</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mf">20.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">),</span> <span class="n">interval</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">repeat</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">ani</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="sh">"</span><span class="s">heart.gif</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># save as one gif document
</span></code></pre></div></div>]]></content><author><name></name></author><category term="python"/><category term="animated heart"/><category term="python"/><summary type="html"><![CDATA[Stumbled upon a dynamic heart-shaped graph implemented by someone using MATLAB on a Chinese TikTok video, I got inspired to recreate it using Python. So I explored two different implementation approaches, and the result is as follows:]]></summary></entry><entry><title type="html">Approximation of power function by exponential function</title><link href="https://robinchen121.github.io/blog/2023/approximation-power-function-exponential/" rel="alternate" type="text/html" title="Approximation of power function by exponential function"/><published>2023-04-05T04:30:00+00:00</published><updated>2023-04-05T04:30:00+00:00</updated><id>https://robinchen121.github.io/blog/2023/approximation-power-function-exponential</id><content type="html" xml:base="https://robinchen121.github.io/blog/2023/approximation-power-function-exponential/"><![CDATA[<p>The power function \((1+x)^\alpha\) can be approximated by the exponential function \(e^{\alpha x}\), and even further approximated as \(1+\alpha x\). This approximation is encountered in the introduction of exponential smoothing methods in a book (Fundamentals of Supply Chain Theory).</p> <h3 id="1-1xalphaapprox-1alpha-x">1. \((1+x)^{\alpha}\approx 1+\alpha x\)</h3> <p>Expanding \((1+x)^\alpha\) around \(x=0\) using Taylor series, we get</p> \[(1+x)^\alpha=1+\alpha x+\frac{\alpha(\alpha-1)}{2}x^2+\frac{\alpha(\alpha-1)(\alpha-2)}{6}x^3+\dots\] <p>When \(\lvert x\rvert &lt;1\), the terms \(x^2, x^3,\dots\) become smaller. If further \(\lvert\alpha x\rvert \ll 1\) (indicating that \(\lvert\alpha x\rvert\) is sufficiently smaller than 1), the terms on the right side of the equation become increasingly smaller, and we can omit the later terms. Therefore, \((1+x)^{\alpha}\approx 1+\alpha x\).</p> <p>Although a rigorous proof for these two conditions is not found, it seems reasonable.</p> <h3 id="2-1xalphaapprox-ealpha-x">2. \((1+x)^{\alpha}\approx e^{\alpha x}\)</h3> <p>This approximation can be obtained through Taylor expansion, as follows:</p> \[e{^\alpha x}=1+\alpha x+\frac{\alpha^2}{2}x^2+\frac{\alpha^3}{6}x^3+\dots\] <p>When \(\lvert x\rvert\) is small, \((1+x)^\alpha\) is close to \(e^{\alpha x}\).</p> <p>In <code class="language-plaintext highlighter-rouge">exponential smoothing methods</code>, the weighted historical demand value at time \(i\) is \(\alpha(1-\alpha)^i\) can be approximated as \(\alpha e^{-\alpha i}\). The following graphs illustrate the degree of approximation for these two functions.</p> <p align="center"> <img src="https://raw.githubusercontent.com/RobinChen121/robinchen121.github.io/master/assets/img/powerfunction1.png"/> </p> <p align="center"> <img src="https://raw.githubusercontent.com/RobinChen121/robinchen121.github.io/master/assets/img/powerfunction2.png"/> </p> <p align="center"> <img src="https://raw.githubusercontent.com/RobinChen121/robinchen121.github.io/master/assets/img/powerfunction3.png"/> </p> <p>From the graphs, it is evident that the approximation is quite close, especially when \(\alpha\) is small.</p> <p>Python codes:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>


<span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">y1</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">)</span><span class="o">**</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="n">y2</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">alpha</span><span class="o">*</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$(1-\alpha)^i$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$e^{-\alpha i}$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">$\alpha$ = </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">alpha</span><span class="p">)</span> <span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">y1</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">)</span><span class="o">**</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="n">y2</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">alpha</span><span class="o">*</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$(1-\alpha)^i$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$e^{-\alpha i}$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">$\alpha$ = </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">alpha</span><span class="p">)</span> <span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.8</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">y1</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alpha</span><span class="p">)</span><span class="o">**</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="n">y2</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">alpha</span><span class="o">*</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$(1-\alpha)^i$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">$e^{-\alpha i}$</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">$\alpha$ = </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">alpha</span><span class="p">)</span> <span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="optimization"/><category term="python"/><category term="power function"/><category term="exponential function"/><category term="exponential smoothing"/><summary type="html"><![CDATA[The power function \((1+x)^\alpha\) can be approximated by the exponential function \(e^{\alpha x}\), and even further approximated as \(1+\alpha x\). This approximation is encountered in the introduction of exponential smoothing methods in a book (Fundamentals of Supply Chain Theory).]]></summary></entry><entry><title type="html">Linearize a variable have value in one range and 0 otherwise</title><link href="https://robinchen121.github.io/blog/2022/linearize-variable-in-range/" rel="alternate" type="text/html" title="Linearize a variable have value in one range and 0 otherwise"/><published>2022-12-28T07:27:00+00:00</published><updated>2022-12-28T07:27:00+00:00</updated><id>https://robinchen121.github.io/blog/2022/linearize-variable-in-range</id><content type="html" xml:base="https://robinchen121.github.io/blog/2022/linearize-variable-in-range/"><![CDATA[<p>Occasionally, I encountered a linearization problem: a variable takes one value within a certain range and 0 outside that range. For example,</p> <p>If \(m_1 \leq x \leq m_2\), then \(y = x\); otherwise, \(y = 0\).</p> <p>The linearization of this problem is as follows: introduce a binary variable \(z\) and a sufficiently large constant \(M\),</p> \[\begin{aligned} x&amp;\geq m_1-zM\\ x&amp;\leq m_2+zM\\ y-x&amp;\geq -zM\\ y-x&amp;\leq zM\\ y&amp;\leq (1-z)M\\ y&amp;\geq -(1-z)M \end{aligned}\]]]></content><author><name></name></author><category term="optimization"/><category term="linear programming"/><category term="value in a range"/><category term="zero otherwise"/><summary type="html"><![CDATA[Occasionally, I encountered a linearization problem: a variable takes one value within a certain range and 0 outside that range. For example,]]></summary></entry><entry><title type="html">Digging into the paper “Dynamic Inventory Management with Cash Flow Constraints”</title><link href="https://robinchen121.github.io/blog/2019/stochastic-inventory-with-cash-flow/" rel="alternate" type="text/html" title="Digging into the paper “Dynamic Inventory Management with Cash Flow Constraints”"/><published>2019-10-17T04:30:00+00:00</published><updated>2019-10-17T04:30:00+00:00</updated><id>https://robinchen121.github.io/blog/2019/stochastic-inventory-with-cash-flow</id><content type="html" xml:base="https://robinchen121.github.io/blog/2019/stochastic-inventory-with-cash-flow/"><![CDATA[<p>The paper “Dynamic Inventory Management with Cash Flow Constraints” published in Naval Research Logistics, 2008 gave a pioneering work on multi-period stochastic inventory problem with cash flow constraints.</p> <p>The functional equation for the problem:</p> \[\begin{cases} V_n(x, w)=\max_{x\leq y\leq x+w/c}V_{n+1}((y-d)^+, p\min\{y, d\}-c(y-x)+w)\\ V_N(x,w)=w+rx \end{cases}\] <p>Now we need to prove the joint concavity of \(V_n(x,w)\). This is by induction.</p> <p>\(V_n(x, w)\) is apparently jointly concave for \(n=N\).</p> <p>Assume \(V_{n+1}(x, w)\) is jointly concave. We now prove the property for \(n\). This is by proving the joint concavity of \(V_{n+1}(x, y, w)\) in \(x\), \(y\) and \(w\).</p> <p>For any \((x_1, y_1, w_1)\), \((x_2, y_2, w_2)$, and\)0\leq \lambda\leq 1\(,\)0\leq \overline{\lambda}\leq 1\(,\)\lambda+\overline{\lambda}=1$$, we need to prove:</p> \[\begin{align} &amp;V_{n+1}((\lambda y_1+\overline{\lambda}y_2-d)^+,p\min\{\lambda y_1+\overline{\lambda}y_2,d\}-c(\lambda y_1+\overline{\lambda}y_2-\lambda x_1)+w)\\ \leq &amp; \lambda V_{n+1}((y_1-d)^+, p\min\{y_1, d\}-c(y_1-\lambda x_1-\overline{\lambda} x_2)+w)\\ &amp; + \overline{\lambda}V_{n+1}((y_2-d)^+, p\min\{y_2, d\}-c(y_2-\lambda x_1-\overline{\lambda} x_2)+w) \end{align}\] <p>Because of the convexity of \((y-d)^+\),</p> \[(\lambda y_1+\overline{\lambda}y_2-d)^+\leq \lambda(y_1-d)^++\overline{\lambda}(y_2-d)^+\] <p>Because of the concavity of \(\min\{y, d\}\),</p> \[p\min\{\lambda y_1+\overline{\lambda}y_2,d\}\geq \lambda p\min\{y_1, d\}+\overline{\lambda}p\min\{y_2, d\}\] <p>And</p> \[\begin{align} &amp;V_{n+1}((\lambda y_1+\overline{\lambda}y_2-d)^+,p\min\{\lambda y_1+\overline{\lambda}y_2,d\}-c(\lambda y_1+\overline{\lambda}y_2-\lambda x_1-\overline{\lambda} x_2)+w)\}\\ &amp;=V_{n+1}((\lambda y_1+\overline{\lambda}y_2-d)^+,p(\lambda y_1+\overline{\lambda}y_2)-p(\lambda y_1+\overline{\lambda}y_2-d)^+\\ &amp;\quad -c(\lambda y_1+\overline{\lambda}y_2-\lambda x_1-\overline{\lambda} x_2)+w) \end{align}\] <p>Since \(V_n(z, A-pz)\) is decreasing in \(z\) (this is proved by that the domain of \(y\) narrows as the increasing of \(z\)), we can obtain:</p> \[\begin{align} &amp;V_{n+1}((\lambda y_1+\overline{\lambda}y_2-d)^+,p\min\{\lambda y_1+\overline{\lambda}y_2,d\}-c(\lambda y_1+\overline{\lambda}y_2-\lambda x_1-\overline{\lambda} x_2)+w)\}\\ &amp;\geq V_{n+1}(\lambda(y_1-d)^++\overline{\lambda}(y_2-d)^+,p(\lambda y_1+\overline{\lambda}y_2)-p(\lambda(y_1-d)^++\overline{\lambda}(y_2-d)^+\\ &amp;\quad -c(\lambda y_1+\overline{\lambda}y_2-\lambda x_1-\overline{\lambda} x_2)+w)\\ &amp;=V_{n+1}(\lambda(y_1-d)^++\overline{\lambda}(y_2-d)^+,p\lambda y_1-p\lambda(y_1-d)^--c\lambda (y_1-x_1)\\ &amp;\quad +p\overline{\lambda} y_2-p\overline{\lambda}(y_2-d)^--c\overline{\lambda} (y_2-x_2)+w)\\ &amp;\geq \lambda V_{n+1}((y_1-d)^+, p\min\{y_1, d\}-c(y_1-x_1)+w)\\ &amp;\quad+\overline{\lambda}V_{n+1}((y_2-d)^+, p\min\{y_2, d\}-c(y_2-x_2)+w) \end{align}\] <p>The second inequality is justified by the concavity of \(V_{n+1}(x, w)\) from assumption. (<font color="#FF4500"> I am a little puzzled by this point. It may be a little too quick to reach this, but the conclusion is right. </font>)</p> <p>Another method of proving concavity is through deducting the Heissian maxtrix. This is more complex.</p>]]></content><author><name></name></author><category term="paper reading"/><summary type="html"><![CDATA[The paper “Dynamic Inventory Management with Cash Flow Constraints” published in Naval Research Logistics, 2008 gave a pioneering work on multi-period stochastic inventory problem with cash flow constraints.]]></summary></entry><entry><title type="html">Digging into the paper “the infinite horizon periodic review problem with setup costs”</title><link href="https://robinchen121.github.io/blog/2019/capacitated-lot-sizing-infinite/" rel="alternate" type="text/html" title="Digging into the paper “the infinite horizon periodic review problem with setup costs”"/><published>2019-10-16T04:30:00+00:00</published><updated>2019-10-16T04:30:00+00:00</updated><id>https://robinchen121.github.io/blog/2019/capacitated-lot-sizing-infinite</id><content type="html" xml:base="https://robinchen121.github.io/blog/2019/capacitated-lot-sizing-infinite/"><![CDATA[<p>The paper “The infinite horizon periodic review problem with setup costs and capacity constraints: a partial characterization of the optimal policy” published in OR, 2004 is not easy for me to follow.</p> <p>I am puzzled by the definition of “piecewise concavity”. This definition is used for proving the optimal order quantity continues to be an integer if the starting inventory level \(x\) is an integer. In the paper, it says \(g_1(y)=L(y)+cy\) is piecewise concave. <font color="#FF4500"> However, \(L(y)\) is a convex function by assumption. Why is this convex function piecewise concave? </font></p> <p>Then, this paper proposes a definition of \((C, K)\)-convex. By the way, \((C, K)\)-convex here is different from the CK-convexity in Gallego (2000).</p> <p>In order to depict the ordering policy for infinite horizon, the author proves the existence of limiting function of the functional equation. This part is very difficult for me. Maybe additional knowledge of convergence is needed to understand it.</p> <p>In the next step, the \((C, K)\)-convexity of the limiting function is proved and the X-Y band policy is given. A liner programming model is also formulated. I am a little puzzled about the meaning of \(\pi_i^k(t)\).</p>]]></content><author><name></name></author><category term="paper reading"/><category term="inventory"/><summary type="html"><![CDATA[The paper “The infinite horizon periodic review problem with setup costs and capacity constraints: a partial characterization of the optimal policy” published in OR, 2004 is not easy for me to follow.]]></summary></entry><entry><title type="html">Pursuing the paper “ Capacitated inventory problems with fixed order costs-some optimal policy structure”</title><link href="https://robinchen121.github.io/blog/2019/pursuing-paper-capacitated-inventory-problems-with-fixed-order-costs/" rel="alternate" type="text/html" title="Pursuing the paper “ Capacitated inventory problems with fixed order costs-some optimal policy structure”"/><published>2019-09-27T21:27:00+00:00</published><updated>2019-09-27T21:27:00+00:00</updated><id>https://robinchen121.github.io/blog/2019/pursuing-paper-capacitated-inventory-problems-with-fixed-order-costs</id><content type="html" xml:base="https://robinchen121.github.io/blog/2019/pursuing-paper-capacitated-inventory-problems-with-fixed-order-costs/"><![CDATA[<p>Recently, one of my paper was rejected. I forgot to cite one important paper “Capacitated inventory problems with fixed order costs: some optimal policy structure” in EJOR (2000) by Gallego &amp; Scheller-Wolf. Now I am digging into this paper.</p> <p>This paper characterize some features of the optimal ordering policy for the problem — “capacitated stochastic inventory problem with fixed costs”. It proposes a definition of CK convexity.</p> <font color="#FF4500">This paper is not very long, but is very concise in its wonderful proofs. </font> <p>In my opinion, the proofs for CK convexity in this paper can also hold for non-stationary demands.</p> <h1 id="1-problem-description">1. Problem description</h1> <p>\(L(y)\) is the expected one-period holding/backorder cost.</p> \[L(y)=E[h(y-D)^++p(y-D)^-]\] <p>\(p\) is the unit backorder cost.</p> \[J(y) = cy+L(y)\] <p>It can be easily shown that \(J(y)\) is convex. Also assume \(J(y)\rightarrow \infty\) as \(\|y\|\rightarrow\infty\) (for proving the convexity or CK convexity of a induction expression).</p> <p>The DP(dynamic programming model) of the problem is:</p> \[f_n(x) = -cx+H_n(x), \qquad 0\leq n\leq N\] <p>where:</p> \[\begin{aligned} G_n(y) &amp;= J(y)+\alpha E[f_{n-1}(y-D_n)]\\ H_n(y) &amp;=\inf_{y\in[x, x+C]}\{KI\{y&gt;x\}+G_n(y)\} \end{aligned}\] <p>\(\alpha\) is the discount factor and \(I\{A\}\) is a unit step function.</p> <h1 id="2-ck-convexity">2. CK-convexity</h1> <p><strong>CK convex</strong>: given a non-negative \(C\) and \(K\), we call the function \(G:\mathbb{R}\rightarrow \mathbb{R}\) CK-convex if for all \(y\), \(b&gt;0\), \(z\in[0, C]\)，</p> \[K+G(y+z)\geq G(y)+\frac{z}{b}\{G(y)-G(y-b)\}\] <p><strong>Strong CK convex</strong>: given a non-negative \(C\) and \(K\), we call the function \(G:\mathbb{R}\rightarrow \mathbb{R}\) strong CK-convex if for all \(y, b&gt;0, a\geq 0\), \(z\in[0, C]\)，</p> \[K+G(y+z)\geq G(y)+\frac{z}{b}\{G(y-a)-G(y-a-b)\}\] <p>When \(a=0\), strong CK-convex is CK-convex.</p> <p>Properties of CK-convex:</p> <p>1.If \(G\) is strong CK-convex, it is also DL-convex for any \(0\leq D\leq C\) and \(L\geq K\). 2.If \(G\) is convex, it is also strong CK-convex. 3.If \(G_1\) is strong CK-convex, and \(G_2\) is strong CL-convex, then for \(\alpha, \beta\geq 0\), \(\alpha G_1+\beta G_2\) is strong \(C(\alpha K+\beta L)\) convex. 4.If \(G\) is strong CK-convex and \(X\) is a random variable such that \(E[\|G(y-x)\|]&lt;\infty\), then \(E[\|G(y-x)\|]\) is strong CK convex.</p> <h1 id="3optimal-policy-structure">3.Optimal policy structure</h1> <p>Define the following:</p> \[G^{\ast}=\inf_{y\in\mathbb{R}} G(y)\] \[S = \inf\{y\in\mathbb{R}|G(y)=G^\ast\}\] \[\tilde{G}(x)=K+\inf_{x\leq y\leq x+C}G(y)\] \[\begin{aligned} A(x)&amp;=\tilde{G}(x)-G(x)\\ s&amp;= \inf\{x|A(x)\geq 0\}\\ s'&amp;=\max\{x\leq S|A(x)\leq 0\} \end{aligned}\] <p>Clearly \(-\infty\leq s\leq s'\leq S\) (so \(s\) might not exist when it’s \(-\infty\), when \(x&lt;s\), it is always better to order \(C\), when \(x&gt;s'\), it is always better to not order) It is easy to understand \(s\), \(s'\) and the following lemma by drawing a picture.</p> <p>Also define:</p> \[\begin{aligned} G_C(x)&amp;=K+G(x+C)\\ \overline{G}(x)&amp;=K+ \inf_{s'\leq y\leq x+C}G(y), \qquad s'-C\leq x\leq s'\\ I_+&amp;=I\{s'-C&gt;s\}\\ I_-&amp;=I\{s&gt;s'-C\} \end{aligned}\] <p>An important lemma below.</p> <p><strong>Lemma</strong> Under the assumption \(\|S\|\) is finite (guarantee the optimal point exist).</p> <p>1.\(G\) is non-increasing on \((-\infty, s')\) and strictly decreasing on \((\infty, s)\). 2.\(A(x)\geq 0, \forall x&gt;s'\). (means it’s always not to order when \(x&gt;s'\)). 3.Let</p> \[H(x)=\inf_{x\leq y\leq x+C}\{K I\{y&gt;x\}+G(y)\}=\min\{G(x), \tilde{G}(x)\}\] <p>Then,</p> \[H(x)=\begin{cases} G_C(x), \qquad &amp; x&lt;\min\{s'-C, s\},\\ \min\{G(x), G_C(x)\}I_++\overline{G}(x)I_-\qquad &amp; \min\{s'-C, s\}\leq x&lt;\max\{s'-C, s\}.\\ \min\{G(x), \overline{G}(x)\}, &amp; \max\{s'-C, s\}\leq x\leq s',\\ G(x), &amp; s'&lt;x \end{cases}\] <p>4.\(H(x)\) is strong CK-convex.</p> <p><em>Proof.</em> 1.for any two values \(x_1\), \(x_2\) and \(s'&gt;x_1&gt;x_2\), by strong CK convexity,</p> <p>Since \(A(x)\leq 0\) when \(x\leq s'\), let \(z^\ast\) be the point where \(G(s'+z^\ast)=\inf_{0\leq z\leq C} G(s'+z )\), so</p> \[K+ G(s'+z^\ast )\leq G(s')\] <p>By strong CK convexity,</p> \[K+G(s'+z^\ast)\geq G(s')+\frac{z^\ast}{x_1-x_2}(G(x_1)-G(x_2))\] <p>From the above expressions, we can obtain</p> \[G(x_1)\leq G(x_2)\] <p>That is, \(G\) is non-increasing on \((-\infty, s')\).</p> <p>For \(s&gt;x_1&gt;x_2\)，since \(A(x)\leq 0\) when \(x&lt; s\), let \(z^\ast\) be the point where \(G(x_1+z^\ast)=\inf_{0\leq z\leq C} G(s'+z )\), so</p> \[K+ G(x_1+z^\ast )&lt; G(x_1)\] <p>By strong CK convexity,</p> \[K+G(x_1+z^\ast)\geq G(x_1)+\frac{z^\ast}{x_1-x_2}(G(x_1)-G(x_2))\] <p>We can obtain</p> \[G(x_1)&lt; G(x_2)\] <p>That is, \(G\) is strictly decreasing on \((-\infty, s)\).</p> <p>2.By definition, this property is true when \(x\in(s', S]\), when \(x&gt;S\), for any \(z\in[0, C]\), from CK convexity,</p> \[K+G(x+z)\geq G(x)+\frac{z}{x_1-x_2}(G(x)-G(S))\] <p>Since \(G(x)\geq G(S)\),</p> \[K+G(x+z)\geq G(x)\] <p>This leads to \(A(x)\geq 0\).</p> <p>3.(1) Since \(x&lt;\min\{s'-C, s\}\), \(x+C\leq s'\), because G is non-increasing in \((-\infty, s')\), \(H(x)=G_C(x)\).</p> <p>(2) When \(x&gt;s'\), since \(A(x)\geq 0\), \(H(x)=G(x)\).</p> <p>(3) When \(\max\{s'-C, s\}\leq x\leq s'$, $s'\leq x+C\). \(H(x)\) is the minimum value of \(G(x)\) in the range \([x, x+C]\), so \(H(x)=\min\{G(x), \overline{G}(x)\}\)</p> <p>(4) When \(\min\{s'-C, s\}\leq x&lt;\max\{s'-C, s\}, x+C&lt;s'\),</p> <p>if \(s'-C\geq s\), \(s\leq x\leq s'-C\), \(s+C\leq x+C\leq s'\), may order \(C\) or not order, \(H(x)=\min\{G(x), G_C(x)\}I^+\);</p> <p>if \(s'-C&lt; s, x&lt;s\), always order to the point in \([s', x+C]\), \(H(x)=\overline{G}(x)I^-\).</p> <p>4.For three values \(x+z, x, x-a, x-a-b\) in the domain.</p> <p>There are several scenarios according to the values of \(H(x+z)\) and \(H(x-a-b)\). Let \(\Delta\):</p> \[\Delta=K+H(x+z)-H(x)-\frac{z}{b}(H(x-a)-H(x-a-b))\] <p>We need to prove that \(\Delta\geq0\).</p> <p>(1) \(H(x+z)=G(x+z)\), \(H(x-a-b)=G(x-a-b)\).</p> <p>Since $H(x)=\min{G(x), \tilde{G}(x)}$, $H(x)\leq G(x)$; Similarly, $H(x-a)\leq G(x-a)$, \(\Delta\geq K+G(x+z)-G(x)-\frac{z}{b}(G(x-a)-G(x-a-b))\geq 0\)</p> <p>The above equation holds from the CK-convexity of \(G\).</p> <p>(2) There exists \(u_1\in[0,C]$ and $u_2\in[0,C]\), where \(H(x+z)=\tilde{G}(x+z)=K+G(x+z+u_1)\), \(H(x-a-b)=\tilde{G}(x-a-b)=K+G(x-a-b+u_2)\).</p> \[\begin{align} \Delta=&amp;K+\tilde{G}(x+z)-H(x)-\frac{z}{b}(H(x-a)-\tilde{G}(x-a-b)) \end{align}\] <p>(a). \(z+u_1\leq C\).</p> <p>In this situation, \(H(x)\leq \tilde{G}(x+z)\).</p> <p>     (I) \(-b+u_2&gt; 0\).</p> <p>     In this situation, \(\tilde{G}(x-a-b)=K+G(x-a-b+u_2)\geq H(x-a)\), so</p> \[\begin{align} \Delta=&amp;K+\tilde{G}(x+z)-H(x)-\frac{z}{b}(H(x-a)-\tilde{G}(x-a-b))\\ \geq &amp;K\geq 0 \end{align}\] <p>     (II) \(-b+u_2\leq 0\).</p> <p>     In this situation, since \(H(x)\leq K+G(x+u_1)\), \(H(x-a)\leq K+G(x-a)\),</p> \[\begin{align} \Delta=&amp;K+\tilde{G}(x+z)-H(x)-\frac{z}{b}(H(x-a)-\tilde{G}(x-a-b))\\ \geq &amp;K+K+G(x+z+u_1)-K-G(x+u_1)-\frac{z}{b}(K+G(x-a)-K-G(x-a-b+u_2))\\ =&amp; K+G(x+z+u_1)-G(x+u_1)-\frac{z}{b}(G(x-a)-G(x-a-b+u_2))\\ \geq&amp; K+G(x'+z)-G(x')-\frac{z}{b'}(G(x'-a')-G(x-a'-b'))\geq 0 \end{align}\] <p>where \(x' = x+u_1\geq z\) and \(a'=a+u_1\), \(b'=b-u_2\).</p> <p>(b). \(z+u_1&gt; C\).</p> <p>In this situation,</p> \[\begin{align} \Delta=&amp;K+K+G(x+z+u_1)-H(x)-\frac{z}{b}(H(x-a)-H(x-a-b))\\ \geq &amp; K+G(x+z+u_1)-G(x)-\frac{z}{b}(G(x-a)-G(x-a-b+u_2))\\ \end{align}\] <p>     (I) \(-b+u_2\leq 0\).</p> <p>$\Delta\geq 0$ is justified by the similar proof with the above.</p> <p>     (II) \(-b+u_2&gt; 0\).</p> <p>In this situation, \(H(x-a)\leq K+G(x-a+u_2)\), \(H(x)\leq H(x+C)\).</p> \[\begin{align} \Delta=&amp;K+K+G(x+z+u_1)-H(x)-\frac{z}{b}(H(x-a)-H(x-a-b))\\ \geq &amp; K+G(x+z+u_1)-G(x+C)-\frac{z}{b}(G(x-a+u_2)-G(x-a-b+u_2))\\ \geq &amp; K+G(x+z')-G(x+C)-\frac{z'}{b}(G(x-a')-G(x-a'-b))\geq 0 \end{align}\] <p>where \(z'=z+u_1-C&lt;z\), \(a'=a+C-u_2\).</p> <p>(3) \(H(x+z)=K+G(x+z+u_1)\), \(H(x-a-b)=G(x-a-b)\).</p> \[\begin{align} \Delta=&amp;K+K+G(x+z+u_1)-H(x)-\frac{z}{b}(H(x-a)-G(x-a-b))\\ \end{align}\] <p>Since \(H(x)\leq G(x+u_1)\), \(H(x-a)\leq G(x-a)\).</p> \[\begin{align} \Delta\geq &amp;K+G(x+z+u_1)-G(x)-\frac{z}{b}(G(x-a)-G(x-a-b))\\ \geq&amp;K+G(x+z)-G(x+u_1)-\frac{z}{b}(G(x+u_1-a-u_1)-G(x+u_1-a-u_1-b))\\ =&amp; K+G(x'+z)-G(x'+u_1)-\frac{z}{b}(G(x'-a')-G(x'-a'))\geq 0 \end{align}\] <p>where \(x'=x+u_1$, $a'=a+u_1\).</p> <p>(4) \(H(x+z)=G(x+z)\), \(H(x-a-b)=K+G(x-a-b+u_2)\).</p> \[\begin{align} \Delta= &amp;K+G(x+z)-H(x)-\frac{z}{b}(H(x-a)-K-G(x-a-b+u_2))\\ \end{align}\] <p>(a). If \(H(x-a)-K-G(x-a-b+u_2)\leq 0\), since \(K+G(x+z)-H(x)\geq 0(\because z\in [0,C])\), \(\Delta\geq 0\).</p> <p>(b). If \(H(x-a)-K-G(x-a-b+u_2)&gt;0\),</p> \[\begin{align} \Delta= &amp;K+G(x+z)-H(x)-\frac{z}{b}(H(x-a)-K-G(x-a-b+u_2)) \end{align}\] <p>There are two scenarios:</p> <p>     (I) \(b-u_2\geq 0\).</p> \[\begin{align} \Delta \geq&amp; K+G(x+z)-G(x)-\frac{z}{b}(G(x-a)-G(x-a-b+u_2))\\ =&amp;K+G(x+z)-G(x)-\frac{z}{b'}(G(x-a)-G(x-a-b')) \end{align}\] <p>where \(b'=b-u_2\leq b\), \(\Delta\geq 0\) according to the CK-convexity of \(G\).</p> <p>     (I) \(b-u_2&lt; 0\).</p> \[\begin{align} \Delta=K+G(x+z)-H(x)-\frac{z}{b}(H(x-a)-K-G(x-a-b+u_2)) \end{align}\] <p>Since \(H(x-a)\leq K+G(x-a-b+u_2)\), from the assumption \(H(x-a)-K-G(x-a-b+u_2)&gt;0\), we know that $H(x-a)= K+G(x-a-b+u_2)$. (<font color="#FF4500"> this condition is very clear, I think it is not very necessary to give a corrigendum in 2016</font>)</p> \[\begin{align} \Delta=K+G(x+z)-H(x)\geq 0 \end{align}\] <p>Based on the above scenarios of $H(x+z)$, $H(x-a-b)$ and different bounds of \(H(x)\), \(H(x-a)\), the CK-convexity of \(H\) is justified.</p> <p style="text-align:right;font-size:30px">&#9633; </p>]]></content><author><name></name></author><category term="paper reading"/><summary type="html"><![CDATA[Recently, one of my paper was rejected. I forgot to cite one important paper “Capacitated inventory problems with fixed order costs: some optimal policy structure” in EJOR (2000) by Gallego &amp; Scheller-Wolf. Now I am digging into this paper.]]></summary></entry><entry><title type="html">Pursuing the paper “ cash-flow based dynamic inventory management”</title><link href="https://robinchen121.github.io/blog/2019/pursuing-paper-cash-flow-based-dynamic-inventory-management/" rel="alternate" type="text/html" title="Pursuing the paper “ cash-flow based dynamic inventory management”"/><published>2019-04-12T18:27:00+00:00</published><updated>2019-04-12T18:27:00+00:00</updated><id>https://robinchen121.github.io/blog/2019/pursuing-paper-cash-flow%20based-dynamic-inventory-management</id><content type="html" xml:base="https://robinchen121.github.io/blog/2019/pursuing-paper-cash-flow-based-dynamic-inventory-management/"><![CDATA[<p>This paper is written by Katehakis et al. (2016). Its main difference with Chao et al. (2008) and Gong et al. (2014) is its considering of non-stationary demand.</p> <h3 id="1-problem-description">1. Problem description</h3> <p>Inventory-cash state \((x_n, y_n)\), where \(x_n\) the initial inventory in period $$n$, and $y_n$ denotes the amount of product that can be purchased using all the available cash $\gamma_n$ ($\gamma_n=cy_n$).</p> <p>The cash flow fron inventory operations (\(D_n\) is the random demand):</p> \[\begin{aligned} R_n(D_n, q_n, x_n)=&amp; p\min\{q_n+x_n, D_n\}-h(q_n+x_n-D_n)^+\\ =&amp;p(q_n+x_n)-(p+h)(q_n+x_n-D_n)^+ \end{aligned}\] <p>The cash flow from financial transactions is (\(i\) is deposite rate and \(l\) is bank loan interest rate):</p> \[\begin{aligned} K_n(q_n, y_n)=&amp; c(y_n-q_n)[(1+i)\bf{1}_{\{q_n\leq y_n\}}+(1+l)\bf{1}_{\{q_n&gt; y_n\}}] \end{aligned}\] <p>State transition functions:</p> \[\begin{aligned} x_{n+1}=&amp;(x_n+q_n-D_n)^+\\ y_{n+1}=&amp;\left[R_n(D_n, q_n, x_n)+K_n(q_n, y_n)\right]/c \end{aligned}\] <p>Optimality equation:</p> \[\begin{aligned} V_n(x_n, y_n)=&amp;\sup_{q_n\geq 0} \mathbb{E}\left[V_{n+1}(x_{n+1},y_{n+1})\right]\\ =&amp;\sup_{q_n\geq 0} \mathbb{E}\left[R_n(D_n, q_n, x_n)+K_n(q_n, y_n)\right] \end{aligned}\] <h3 id="2-the-single-period-problem-for-period-n">2. The single period problem for period \(N\)</h3> <p>The expected net wealth at period \(N\) is:</p> \[G(x,q,y)=p(q+x)-(p-s)(q+x-D)^++c(y-q)[(1+i)\bf{1}_{\{q\leq y\}}+(1+l)\bf{1}_{\{q&gt; y\}}]\] <p><strong>Lemma 1</strong> \(G(x,q,y)\) is continuous and satisfies the following:</p> <ul> <li>It is concave in \(q\in [0, \infty]\).</li> <li>It is increasing and concave in \(x\), for \(s&gt;0\).</li> <li>It is increasing and concave in \(y\), for all \(s&lt;p\).</li> </ul> <p><i>Proof</i></p> \[\frac{\partial G}{\partial q}=\begin{cases} p-c(1+i)-(p-s)F(q+x)\quad &amp;q\leq y\\ p-c(1+l)-(p-s)F(q+x)&amp; q&gt;y \end{cases}\] \[\frac{\partial^2 G}{\partial q^2}=-(p-s)f(q+x)&lt;0\] <p>So, \(G(x,q,y)\) is concave in \(q\in [0,\infty]\).</p> <p>When \(s&gt;0\),</p> \[\frac{\partial G}{\partial x}=p-(p-s)F(q+x)&gt;0\] <p>So, \(G(x,q,y)\) is increasing and concave in \(x\), for \(s&gt;0\).</p> \[\frac{\partial G}{\partial y}=c[(1+i)\bf{1}_{\{q\leq y\}}+(1+l)\bf{1}_{\{q&gt; y\}}]&gt;0\] \[\frac{\partial^2 G}{\partial y^2}=0\] <p>So, \(G(x,q,y)\) is increasing and concave in \(y\).</p> <p style="text-align:right;font-size:30px">&#9633;</p> <p>Now we find the optimal ordering pattern for period \(N\) by drawing a picture of \(\partial G/\partial q\). Let \(p=5\), \(c=1\), \(i=0.01\), \(l=0.05\), \(s=2\), and Demand distribution \(\xi\sim N(10,2)\). The Matlab code:</p> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">DrawPartialGq</span>

<span class="n">p</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span> <span class="n">c</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">=</span><span class="mf">0.01</span><span class="p">;</span> <span class="n">l</span><span class="o">=</span><span class="mf">0.1</span><span class="p">;</span> <span class="n">s</span><span class="o">=</span><span class="mf">1.5</span><span class="p">;</span>
<span class="n">mu</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">sigma</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">% normaldistributiohn</span>

<span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">% initial inventory</span>
<span class="n">partialGq1</span> <span class="o">=</span> <span class="o">@</span><span class="p">(</span><span class="n">q</span><span class="p">)</span><span class="n">p</span> <span class="o">-</span> <span class="n">c</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="n">normcdf</span><span class="p">(</span><span class="n">q</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">);</span>
<span class="n">partialGq2</span> <span class="o">=</span> <span class="o">@</span><span class="p">(</span><span class="n">q</span><span class="p">)</span><span class="n">p</span> <span class="o">-</span> <span class="n">c</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="n">normcdf</span><span class="p">(</span><span class="n">q</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">);</span>


<span class="nb">fplot</span><span class="p">(</span><span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="mi">0</span><span class="p">,[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="s1">'--'</span><span class="p">,</span> <span class="s1">'Linewidth'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nb">hold</span> <span class="n">on</span><span class="p">;</span>
<span class="nb">fplot</span><span class="p">(</span><span class="n">partialGq1</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="s1">'r'</span><span class="p">,</span> <span class="s1">'Linewidth'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nb">fplot</span><span class="p">(</span><span class="n">partialGq2</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'Linewidth'</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nb">xlabel</span><span class="p">({</span><span class="s1">'$x+q$'</span><span class="p">},</span> <span class="s1">'Interpreter'</span><span class="p">,</span> <span class="s1">'latex'</span><span class="p">);</span>
<span class="nb">legend</span><span class="p">({</span><span class="s1">' '</span><span class="p">,</span> <span class="s1">'$q\leq y$'</span><span class="p">,</span> <span class="s1">'$q&gt;y$'</span><span class="p">},</span> <span class="s1">'Interpreter'</span><span class="p">,</span> <span class="s1">'latex'</span><span class="p">);</span>
<span class="nb">hold</span> <span class="n">off</span><span class="p">;</span>
<span class="k">end</span>
</code></pre></div></div> <p>The picture:</p> <p><img src="https://raw.githubusercontent.com/RobinChen121/robinchen121.github.io/master/assets/img/partialGq.png" alt=""/></p> <p>Since \(G(x,y,q)\) is continuous, we can conduct the optimal ordering policy below:</p> \[q^\ast=\begin{cases} (\alpha-x)^+\quad &amp; x+y\leq \alpha\\ y &amp; \alpha&lt;x+y&lt;\beta\\ (\beta-x)^+ &amp; x+y\geq \beta \end{cases}\] <p>Therefore, \(V_N(x,y)\) can be written to:</p> \[\begin{aligned} V_N(x,y)=&amp;p(x+q^\ast)-(p+h)(x+q^\ast-D_N)^++K_n(q,y)\\ =&amp;\begin{cases} px-(p+h)(x-D_N)^++cy(1+i) \quad &amp;x&gt;\beta\\ p\beta-(p+h)(\beta-D_N)^++c(x+y-\beta)(1+i)\quad &amp;x\leq\beta, x+y\geq \beta\\ p(x+y)-(p+h)(x+y-D_N)^+ \quad&amp;\alpha\leq x+y&lt;\beta\\ p\alpha-(p+h)(\alpha-D_N)^+-(\alpha-x-y)(1+l)\quad &amp; x+y&lt;\alpha \end{cases}\end{aligned}\quad\tag{1}\] <p>It can be easily shown that \(V_N(x,y)\) is jointly concave in \(x\) and \(y\).</p> <h3 id="2-the-optimal-ordering-policy-for-period-nn">2. The optimal ordering policy for period \(n&lt;N\)</h3> <p><strong>Theorem 1</strong> for any \(n\), \(V_n(x,y)\) is jointly concave in \(x\) and \(y\).</p> <p><i>Proof</i></p> <p>Let \(z_n=x_n+q_n\),</p> \[V_n(x,y)=\max_{z\geq x} G_n(x,y,z)\\ G_n(x,y,z)=\mathbb{E}[V_{n+1}(x,y)]\] <p>And the state transition function:</p> \[\begin{aligned} x_{n+1}&amp;=(z_n-D_n)^+\\ c_{n+1}y_{n+1}&amp;=p(z_n-D_n)-(p+h)(z_n-D_n)^++c(x_n+y_n-z_n)[(1+i)\bf{1}_{\{z_n\leq x_n+y_n\}}+(1+l)\bf{1}_{\{z_n&gt; x_n+y_n\}}] \end{aligned}\] <p>By recursion, we first prove for period \(n=N\). \(G_N(x,y,z)\) is apparenlty concave when \(n=N\). It can also be easily shown that \(V_N(x,y)\) is jointly concave in \(x\) and \(y\) from Eq. (1). Now we prove for period \(n&lt;N\).</p> <p>Assume \(V_{n+1}(x,y)\)$ is concave, the first derivatives of the state transition functions are the following:</p> \[\begin{cases} \frac{\partial x_{n+1}}{\partial z_n}&amp;=1_{\{z_n\geq D_n\}}\\ \frac{\partial x_{n+1}}{\partial x_n}&amp;=0\\ \frac{\partial x_{n+1}}{\partial y_n}&amp;=0\\ \end{cases}\] \[\begin{cases} \frac{\partial y_{n+1}}{\partial z_n}&amp;=p'-(p'+h')_{\{z_n&gt;D_n\}}-c'_n(1+i)_{z_n\leq x_n+y_n}-c'_n(1+l)_{z_n\leq x_n+y_n}\\ \frac{\partial y_{n+1}}{\partial x_n}&amp;=c'_n(1+i)_{z_n\leq x_n+y_n}+c'_n(1+l)_{z_n\leq x_n+y_n}\\ \frac{\partial y_{n+1}}{\partial y_n}&amp;=c'_n(1+i)_{z_n\leq x_n+y_n}+c'_n(1+l)_{z_n\leq x_n+y_n}\\ \end{cases}\] <p>The concavity is proved by the positive definiteness of Hessian matrix.</p> \[\begin{aligned} \frac{\partial G_n(x_n, y_n, z_n)}{\partial x_n }&amp;=\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial x_{n+1}}\frac{\partial x_{n+1}}{\partial x_n}+\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial x_n}\right]\\ &amp;=\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial x_n}\right] \end{aligned}\] \[\begin{aligned} \frac{\partial G_n(x_n, y_n, z_n)}{\partial y_n }&amp;=\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial x_{n+1}}\frac{\partial x_{n+1}}{\partial y_n}+\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial y_n}\right]\\ &amp;=\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial y_n}\right] \end{aligned}\] \[\begin{aligned} \frac{\partial G_n(x_n, y_n, z_n)}{\partial z_n }&amp;=\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial x_{n+1}}\frac{\partial x_{n+1}}{\partial z_n}+\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial z_n}\right]\\ &amp;=\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial x_{n+1}}{\partial z_n}\right]+\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial z_n}\right] \end{aligned}\] <p><strong><font color="#FF4500"> Very complex proof ! </font></strong> (adopt property “max of a compound concave function is also concave”)</p> <p>Let \(\frac{\partial G_n(x_n, y_n, z_n)}{\partial z_n}=0\), optimal ordering policies for each period can be obtained. It is very similar to Eq. (1).</p> <h3 id="4-myopic-policy">4. Myopic policy</h3> <h4 id="41-myopic-policy-i">4.1 Myopic policy I</h4> <p>Let</p> \[\underline{s}_n=\begin{cases} -h_n\qquad &amp;n&lt;N\\ s, &amp; n=N \end{cases}\] <p>And,</p> \[\begin{aligned} \underline{a}_n&amp;=\frac{p_n-c_n(1+l_n)}{p_n-\underline{s}_n}\\ \underline{b}_n&amp;=\frac{p_n-c_n(1+i_n)}{p_n-\underline{s}_n}\\ \underline{\alpha}_n&amp;=F^{-1}_n(\underline{a}_n)\\ \underline{\beta}_n&amp;=F^{-1}_n(\underline{b}_n) \end{aligned}\] <p>Myopic policy I is shown by the following equation.</p> \[\underline{q}_n(x_n, y_n)= \begin{cases} (\underline{\beta}_n-x_n)^+, \quad &amp;x_n+y_n\geq \beta_n\\ y_n, &amp;\underline{\alpha}_n\leq x_n+y_n\leq \underline{\beta}_n\\ (\underline{\alpha}_n-x_n)^+, \quad &amp;x_n+y_n&lt; \alpha_n \end{cases}\] <p><strong>Theorem 2</strong> for any \(n\), the optimal ordering controlling parameter:</p> \[\begin{aligned} \alpha_n\geq \underline{\alpha}_n\\ \beta_n\geq \underline{\beta}_n \end{aligned}\] <p><i>Proof</i></p> <p>Let \(\frac{\partial G_n(x_n, y_n, z_n)}{\partial z_n }=0\), we get</p> \[\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial x_{n+1}}{\partial z_n}\right]+\mathbb{E}\left[\frac{\partial V_{n+1}(x_{n+1},y_{n+1})}{\partial y_{n+1}}\frac{\partial y_{n+1}}{\partial z_n}\right]=0\] \[\mathbb{E}\left[ \frac{\partial V_{n+1}}{\partial y_{n+1}}\left(\frac{\partial x_{n+1}}{\partial z_n}+\frac{\partial y_{n+1}}{\partial z_n}\right) \right]=0\] <p>So, \(\alpha_n\) is the unique solution of</p> \[\mathbb{E}\left[ \frac{\partial V_{n+1}}{\partial y_{n+1}}\left(1_{\alpha_n&gt;D_n}+p'-(p'+h')_{\{\alpha_n&gt;D_n\}}-c'_n(1+l)\right) \right]=0\] <p>That is</p> \[\mathbb{E}\left[ \frac{\partial V_{n+1}}{\partial y_{n+1}}\left(p'-(p'+h')_{\{\alpha_n&gt;D_n\}}-c'_n(1+l)\right) \right]=-\mathbb{E}\left[\frac{\partial V_{n+1}}{\partial y_{n+1}}(1_{\alpha_n&gt;D_n})\right]\] <p>The right side is non-positive, so</p> \[\mathbb{E}\left[ \frac{\partial V_{n+1}}{\partial y_{n+1}}\left(p'-(p'+h')_{\{\alpha_n&gt;D_n\}}-c'_n(1+l)\right) \right]\leq 0\] <p>Because \(\frac{\partial V_{n+1}}{\partial y_{n+1}}\) is always non-negative,</p> \[\mathbb{E}\left[p'-(p'+h')_{\{\alpha_n&gt;D_n\}}-c'_n(1+l)\right]\leq 0\] <p>We can obtain:</p> \[F(\alpha_n)\geq \frac{p_n-c_n(1+l_n)}{p_n-s_n}\] <font color="#FF4500">Very lengthy and complex proofs afterwards...</font> <p style="text-align:right;font-size:30px">&#9633;</p> <p>My major concern:</p> <ul> <li>In Lemma 2, why \(V_n(x_n, y_n)\) is increasing in \(x_n\) and \(y_n\)? the proof in the appendix does not prove this. (Suppose we have very high unit holding cost, increasing \(x_n\) would result in the decreasing of \(V\))</li> <li>In the appendix proof page 35, why “the second-order derivatives of \(x_{n+1}\) and \(y_{n+1}\)with respect to \(z_n\), \(x_n\) and \(y_n\) are all zero”? I think the second-order derivative of $x_{n+1}\(to\)z_n$$ is not zero. It is the probability distribution function of the stochastic demand, which is non-negative.</li> </ul> <h2 id="5-numercial-analysis">5. Numercial analysis</h2> <p>I code the stochastic dynamci programming algorithm for this problem, but my results is different from the author’s in Figure 2 of the paper. In addition, why the authors adopt the zero-inflated Poisson distribution? It is very uncommon distribution.</p>]]></content><author><name></name></author><category term="paper reading"/><summary type="html"><![CDATA[This paper is written by Katehakis et al. (2016). Its main difference with Chao et al. (2008) and Gong et al. (2014) is its considering of non-stationary demand.]]></summary></entry><entry><title type="html">Uniform continuous and ordinary continuous</title><link href="https://robinchen121.github.io/blog/2019/uniform-continuous/" rel="alternate" type="text/html" title="Uniform continuous and ordinary continuous"/><published>2019-03-26T00:00:00+00:00</published><updated>2019-03-26T00:00:00+00:00</updated><id>https://robinchen121.github.io/blog/2019/uniform-continuous</id><content type="html" xml:base="https://robinchen121.github.io/blog/2019/uniform-continuous/"><![CDATA[<h2 id="uniform-continuous">Uniform continuous</h2> <p>Uniform continuity means: <font color="red"> If a function $ f $ is uniformly continuous, then for any two points $ x $ and $ y $ in the domain, as long as $ x $ and $ y $ are sufficiently close, $ f(x) $ and $ f(y)$ will also be sufficiently close. </font></p> <p>Another definition using neighborhoods:</p> <ul> <li>For any real number $ \epsilon &gt; 0 $, there exists a real number $ \delta &gt; 0 $ such that whenever $ |x - y| &lt; \delta $, we have $ |f(x) - f(y)| &lt; \epsilon $.</li> </ul> <p>The Heine-Cantor theorem states:</p> <ul> <li> <font color="red">If a function is continuous on a closed interval, then it is also uniformly continuous.</font> </li> </ul> <p><br/></p> <h2 id="ordinary-continuous">Ordinary continuous</h2> <p>The intuitive meaning of ordinary continuity is:</p> <font color="red">If a function <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> is continuous, then for any point <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> in the domain, there exists a sufficiently small neighborhood around <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> is sufficiently close to the values within this neighborhood.</font> <p>The definition of ordinary continuity by neighborhood:</p> <ul> <li>For any real number $\epsilon &gt; 0$ and any point $x$ in the domain, there exists a real number $\delta &gt; 0$ such that whenever $|x - y| &lt; \delta$, we have $|f(x) - f(y)| &lt; \epsilon$, where \(y\) is any point in the neighborhood of $x$.</li> </ul> <p><br/></p> <h2 id="difference">Difference</h2> <p>From this, we can see:</p> <ul> <li>In the definition of uniform continuity, $\delta$ only depends on $\epsilon$.</li> <li>In the definition of ordinary continuity, $\delta$ depends on both $\epsilon$ and $x$.</li> <li>Uniform continuity is a stricter condition than ordinary continuity: a uniformly continuous function is always ordinary continuous, but a ordinary continuous function is not necessarily uniformly continuous.</li> <li>The distinction between uniform continuity and continuity is not easy to understand. However, it can be better grasped through a geometric interpretation. For example, consider the function $f(x) = 1/x$. This function is continuous on the interval $(0, 1)$, but it is not uniformly continuous because choosing two points close to 0 that are close to each other does not result in their function values being sufficiently close.</li> </ul>]]></content><author><name></name></author><category term="optimization"/><category term="uniform continuous"/><category term="optimization"/><summary type="html"><![CDATA[Uniform continuous]]></summary></entry></feed>